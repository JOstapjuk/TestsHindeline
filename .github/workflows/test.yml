name: Automated Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  python-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Python tests with pytest
      run: |
        pytest python_tests/ -v --tb=short --html=reports/python-report-${{ matrix.python-version }}.html --self-contained-html
    
    - name: Run Python tests with coverage
      run: |
        pytest python_tests/ --cov=python_tests --cov-report=xml --cov-report=html
    
    - name: Upload Python test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-test-results-${{ matrix.python-version }}
        path: |
          reports/
          htmlcov/
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage

  selenium-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Selenium tests
      run: |
        pytest selenium_tests/ -v --tb=short --html=reports/selenium-report.html --self-contained-html
    
    - name: Upload Selenium test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: selenium-test-results
        path: reports/

  javascript-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Playwright
      run: |
        npm install -g playwright
        npx playwright install --with-deps
    
    - name: Run JavaScript tests with Playwright
      run: |
        npx playwright test --reporter=html
    
    - name: Upload JavaScript test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: javascript-test-results
        path: |
          playwright-report/
          test-results/

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety security scan
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run Black code formatting check
      run: black --check --diff .
    
    - name: Run isort import sorting check
      run: isort --check-only --diff .
    
    - name: Run Flake8 linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run MyPy type checking
      run: mypy python_tests/ selenium_tests/ --ignore-missing-imports || true

  performance-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance tests
      run: |
        pytest python_tests/ -v -m "not slow" --durations=10
    
    - name: Run slow performance tests
      run: |
        pytest python_tests/ -v -m slow --timeout=300

  test-summary:
    runs-on: ubuntu-latest
    needs: [python-tests, selenium-tests, javascript-tests, security-scan, lint-and-format]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create test summary
      run: |
        echo "# ðŸ§ª Test Results Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Execution Summary" >> test-summary.md
        echo "- Python Tests: ${{ needs.python-tests.result }}" >> test-summary.md
        echo "- Selenium Tests: ${{ needs.selenium-tests.result }}" >> test-summary.md
        echo "- JavaScript Tests: ${{ needs.javascript-tests.result }}" >> test-summary.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> test-summary.md
        echo "- Lint & Format: ${{ needs.lint-and-format.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Artifacts Generated" >> test-summary.md
        ls -la */ >> test-summary.md || true
    
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
