# 🧪 Testing Playground - Student Guide

Welcome! This guide will teach you how to write automated tests. You'll learn by doing - implementing functions and then writing tests to make sure they work correctly.

## 🚀 Quick Setup

### 1. Install Required Tools
```bash
# Create Python environment
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

# Install testing tools
pip install -r requirements.txt
npm install
npx playwright install
```

### 2. Verify Everything Works
```bash
pytest python_tests/ -v
npx playwright test
```

## 🎯 Your Mission

You'll create functions and write tests for them. Here's what you need to do:

### Python Testing (2-3 hours)
Create functions and write 10-15 tests

### Selenium Testing (1-2 hours)  
Write 5-8 web browser tests

### JavaScript Testing (1-2 hours)
Write 5-8 browser-based tests

## 🐍 Python Testing Tasks

### Step 1: Create Your Functions
Create `python_tests/my_functions.py` with these functions:

```python
def add_numbers(a, b):
    """Add two numbers together"""
    pass  # You implement this!

def multiply_numbers(a, b):
    """Multiply two numbers"""
    pass

def is_even(number):
    """Check if a number is even"""
    pass

def reverse_string(text):
    """Reverse a string"""
    pass

def count_vowels(text):
    """Count vowels in a string (a, e, i, o, u)"""
    pass

def factorial(n):
    """Calculate factorial of n (n!)"""
    pass

def is_palindrome(text):
    """Check if text reads the same forwards and backwards"""
    pass

def find_max(numbers):
    """Find the largest number in a list"""
    pass

def remove_duplicates(items):
    """Remove duplicate items from a list"""
    pass

def validate_email(email):
    """Check if email format is valid (contains @ and .)"""
    pass
```

### Step 2: Write Tests
Create `python_tests/test_my_functions.py`:

```python
import pytest
from my_functions import *

def test_add_numbers():
    """Test adding numbers"""
    assert add_numbers(2, 3) == 5
    assert add_numbers(-1, 1) == 0
    assert add_numbers(0, 0) == 0

def test_multiply_numbers():
    """Test multiplying numbers"""
    assert multiply_numbers(3, 4) == 12
    assert multiply_numbers(0, 5) == 0
    assert multiply_numbers(-2, 3) == -6

# TODO: Write tests for the remaining functions!
# You need to write 8-12 more tests

def test_is_even():
    """Test even number checking"""
    # Your tests here
    pass

def test_reverse_string():
    """Test string reversal"""
    # Your tests here
    pass

def test_count_vowels():
    """Test vowel counting"""
    # Your tests here
    pass

def test_factorial():
    """Test factorial calculation"""
    # Your tests here
    pass

def test_is_palindrome():
    """Test palindrome checking"""
    # Your tests here
    pass

def test_find_max():
    """Test finding maximum value"""
    # Your tests here
    pass

def test_remove_duplicates():
    """Test removing duplicates"""
    # Your tests here
    pass

def test_validate_email():
    """Test email validation"""
    # Your tests here
    pass
```

### Step 3: Run Your Tests
```bash
pytest python_tests/test_my_functions.py -v
```

**Goal**: Make all tests pass by implementing the functions correctly!

## 🌐 Selenium Testing Tasks

### Step 1: Create Your Web Tests
Create `selenium_tests/my_web_tests.py`:

```python
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service

@pytest.fixture(scope="function")
def driver():
    """Create browser for testing"""
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    driver.implicitly_wait(10)
    
    yield driver
    driver.quit()

def test_visit_google(driver):
    """Test visiting Google homepage"""
    driver.get("https://www.google.com")
    assert "Google" in driver.title

def test_visit_httpbin(driver):
    """Test visiting httpbin.org"""
    driver.get("https://httpbin.org/")
    WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.TAG_NAME, "body"))
    )
    assert "httpbin" in driver.title.lower()

# TODO: Write 3-5 more web tests!
# Ideas:
# - Test visiting different websites
# - Test finding elements on pages
# - Test clicking links
# - Test filling forms

def test_your_website_1(driver):
    """Test a website of your choice"""
    # Your test here
    pass

def test_your_website_2(driver):
    """Test another website"""
    # Your test here
    pass

def test_your_website_3(driver):
    """Test a third website"""
    # Your test here
    pass
```

### Step 2: Run Your Web Tests
```bash
pytest selenium_tests/my_web_tests.py -v
```

**Goal**: Write 5-8 tests that visit different websites and check they work!

## 🟨 JavaScript Testing Tasks

### Step 1: Open the Interactive Playground
```bash
open javascript_tests/index.html  # Mac
start javascript_tests/index.html  # Windows
```

### Step 2: Add Your JavaScript Tests
Edit `javascript_tests/tests.js` and add these tests:

```javascript
// Add these to the end of tests.js

test('My custom math test', () => {
    assertEqual(15 + 25, 40);
    assertEqual(100 / 4, 25);
});

test('My custom string test', () => {
    const greeting = "Hello, World!";
    assertTrue(greeting.includes("Hello"));
    assertEqual(greeting.toUpperCase(), "HELLO, WORLD!");
});

test('My custom array test', () => {
    const numbers = [1, 2, 3, 4, 5];
    const doubled = numbers.map(x => x * 2);
    assertEqual(doubled[0], 2);
    assertEqual(doubled.length, 5);
});

test('My custom object test', () => {
    const person = { name: "Alice", age: 25 };
    assertEqual(person.name, "Alice");
    assertEqual(person.age, 25);
});

// TODO: Write 4-6 more JavaScript tests!
// Ideas:
// - Test more math operations
// - Test string methods (split, join, replace)
// - Test array methods (filter, reduce, sort)
// - Test date operations
// - Test JSON operations

test('Your test 1', () => {
    // Your test here
});

test('Your test 2', () => {
    // Your test here
});

test('Your test 3', () => {
    // Your test here
});

test('Your test 4', () => {
    // Your test here
});

test('Your test 5', () => {
    // Your test here
});

test('Your test 6', () => {
    // Your test here
});
```

### Step 3: Run Your JavaScript Tests
1. Refresh the webpage
2. Click "Run All Tests"
3. See your results!

**Goal**: Write 8-10 JavaScript tests that explore different features!

## 🔄 Advanced: GitHub Actions (Optional)

### Step 1: Set Up Git Repository
```bash
git init
git add .
git commit -m "Initial commit: My testing playground"
```

### Step 2: Push to GitHub
1. Create a new repository on GitHub
2. Connect your local repository
3. Push your code

### Step 3: Watch Tests Run Automatically
Your tests will run automatically every time you push code!

## 📊 Testing Checklist

### Python Tests (Target: 10-15 tests)
- [ ] Implement all 10 functions in `my_functions.py`
- [ ] Write tests for `add_numbers()`
- [ ] Write tests for `multiply_numbers()`
- [ ] Write tests for `is_even()`
- [ ] Write tests for `reverse_string()`
- [ ] Write tests for `count_vowels()`
- [ ] Write tests for `factorial()`
- [ ] Write tests for `is_palindrome()`
- [ ] Write tests for `find_max()`
- [ ] Write tests for `remove_duplicates()`
- [ ] Write tests for `validate_email()`
- [ ] All tests pass: `pytest python_tests/test_my_functions.py -v`

### Selenium Tests (Target: 5-8 tests)
- [ ] Test visiting Google
- [ ] Test visiting httpbin.org
- [ ] Write test for website 1
- [ ] Write test for website 2
- [ ] Write test for website 3
- [ ] Write test for website 4
- [ ] Write test for website 5
- [ ] All tests pass: `pytest selenium_tests/my_web_tests.py -v`

### JavaScript Tests (Target: 8-10 tests)
- [ ] Write custom math test
- [ ] Write custom string test
- [ ] Write custom array test
- [ ] Write custom object test
- [ ] Write 6 more custom tests
- [ ] All tests pass in browser

## 🎯 Learning Goals

By the end, you should understand:
- ✅ How to write Python functions and test them
- ✅ How to write tests that check if functions work correctly
- ✅ How to test websites automatically with Selenium
- ✅ How to test JavaScript code in browsers
- ✅ How automated testing works with GitHub Actions

## 🆘 Need Help?

### Common Issues:
- **Tests fail**: Check your function implementations
- **Can't find files**: Make sure you're in the right folder
- **Browser won't open**: Try `pytest --browser=visible` for Selenium tests
- **JavaScript tests don't run**: Refresh the webpage

### Useful Commands:
```bash
# Run all Python tests
pytest python_tests/ -v

# Run specific test file
pytest python_tests/test_my_functions.py -v

# Run Selenium tests with visible browser
pytest selenium_tests/ --browser=visible -v

# Run JavaScript tests (open index.html in browser)
open javascript_tests/index.html
```

## 🎉 Success!

Once you complete all tasks, you'll have:
- 10+ Python functions with tests
- 5+ Selenium web tests  
- 8+ JavaScript tests
- Experience with automated testing

**Total Time**: 4-7 hours of hands-on learning

**Remember**: Start with simple tests and build up complexity. The goal is to practice testing, not to write perfect code!

Happy Testing! 🚀