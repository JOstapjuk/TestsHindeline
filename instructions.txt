# 🧪 Comprehensive Testing Playground - Instructions

This project provides a complete testing environment for Python pytest, Selenium web automation, JavaScript testing, and GitHub Actions CI/CD. Follow these instructions to set up and use the testing playground.

## 📋 Table of Contents
1. [Project Overview](#project-overview)
2. [Prerequisites](#prerequisites)
3. [Installation & Setup](#installation--setup)
4. [Python Pytest Testing](#python-pytest-testing)
5. [Selenium Web Testing](#selenium-web-testing)
6. [JavaScript HTML Testing](#javascript-html-testing)
7. [GitHub Actions CI/CD](#github-actions-cicd)
8. [Running Tests](#running-tests)
9. [Best Practices](#best-practices)
10. [Troubleshooting](#troubleshooting)

## 🎯 Project Overview

This testing playground includes:

- **Python Tests**: Unit tests, integration tests, and web scraping tests using pytest
- **Selenium Tests**: Web browser automation tests for UI testing
- **JavaScript Tests**: Browser-based JavaScript testing with custom framework and Playwright
- **GitHub Actions**: Automated CI/CD pipeline for continuous testing
- **Test Reports**: HTML reports, coverage analysis, and artifact collection

### Project Structure
```
testing_v2/
├── python_tests/           # Python pytest tests
│   ├── test_basic.py      # Basic math, string, array operations
│   └── test_web_scraping.py # HTTP requests and HTML parsing
├── selenium_tests/         # Selenium web automation tests
│   ├── test_selenium_basic.py    # Basic web navigation
│   └── test_selenium_advanced.py # Advanced interactions
├── javascript_tests/       # JavaScript testing environment
│   ├── index.html         # Interactive testing playground
│   ├── test-framework.js  # Custom JavaScript test framework
│   ├── tests.js          # JavaScript test suite
│   ├── app.js            # Application logic
│   └── playwright-tests.spec.js # Playwright browser tests
├── .github/workflows/     # GitHub Actions workflows
│   └── test.yml          # Main CI/CD pipeline
├── requirements.txt       # Python dependencies
├── package.json          # Node.js dependencies
├── pytest.ini           # Pytest configuration
├── playwright.config.js  # Playwright configuration
└── instructions.txt      # This file
```

## 🔧 Prerequisites

Before starting, ensure you have the following installed:

### Required Software
- **Python 3.8+** (3.11 recommended)
- **Node.js 18+** (for JavaScript testing)
- **Git** (for version control)
- **Chrome/Chromium** (for Selenium tests)

### Optional Software
- **VS Code** with Python and JavaScript extensions
- **Docker** (for containerized testing)

### System Requirements
- **RAM**: Minimum 4GB (8GB recommended)
- **Storage**: 2GB free space
- **OS**: Windows 10+, macOS 10.15+, or Linux (Ubuntu 20.04+)

## 🚀 Installation & Setup

### 1. Clone or Download the Project
```bash
# If using Git
git clone <repository-url>
cd testing_v2

# Or download and extract the ZIP file
```

### 2. Set Up Python Environment
```bash
# Create virtual environment (recommended)
python -m venv venv

# Activate virtual environment
# On Windows:
venv\Scripts\activate
# On macOS/Linux:
source venv/bin/activate

# Install Python dependencies
pip install -r requirements.txt
```

### 3. Set Up Node.js Environment
```bash
# Install Node.js dependencies
npm install

# Install Playwright browsers
npx playwright install
```

### 4. Verify Installation
```bash
# Test Python installation
python --version
pytest --version

# Test Node.js installation
node --version
npm --version

# Test Playwright installation
npx playwright --version
```

## 🐍 Python Pytest Testing

### Running Python Tests

#### Basic Test Execution
```bash
# Run all Python tests
pytest python_tests/ -v

# Run specific test file
pytest python_tests/test_basic.py -v

# Run specific test function
pytest python_tests/test_basic.py::TestBasicMath::test_addition -v
```

#### Test Categories and Markers
```bash
# Run only fast tests (exclude slow tests)
pytest python_tests/ -m "not slow" -v

# Run only slow tests
pytest python_tests/ -m "slow" -v

# Run tests with specific marker
pytest python_tests/ -m "web" -v
```

#### Coverage Analysis
```bash
# Run tests with coverage report
pytest python_tests/ --cov=python_tests --cov-report=html

# View coverage report
open htmlcov/index.html  # macOS
start htmlcov/index.html  # Windows
xdg-open htmlcov/index.html  # Linux
```

#### HTML Reports
```bash
# Generate HTML test report
pytest python_tests/ --html=reports/python-report.html --self-contained-html

# View report
open reports/python-report.html
```

### Writing Python Tests

#### Basic Test Structure
```python
import pytest

class TestExample:
    def test_basic_functionality(self):
        """Test basic functionality"""
        assert 2 + 2 == 4
    
    def test_with_fixture(self, sample_data):
        """Test using fixture"""
        assert len(sample_data) > 0

@pytest.fixture
def sample_data():
    """Sample data fixture"""
    return [1, 2, 3, 4, 5]

# Parametrized test
@pytest.mark.parametrize("input,expected", [
    (1, 2),
    (2, 4),
    (3, 6),
])
def test_multiply_by_two(input, expected):
    assert input * 2 == expected
```

#### Test Markers
```python
import pytest

@pytest.mark.slow
def test_long_running_operation():
    """This test takes a long time"""
    # Long running test code
    pass

@pytest.mark.web
def test_web_functionality():
    """This test involves web operations"""
    # Web-related test code
    pass
```

## 🌐 Selenium Web Testing

### Running Selenium Tests

#### Basic Execution
```bash
# Run all Selenium tests
pytest selenium_tests/ -v

# Run specific Selenium test file
pytest selenium_tests/test_selenium_basic.py -v

# Run with browser visible (non-headless)
pytest selenium_tests/ -v -s --browser=visible
```

#### Browser Selection
```bash
# Run with specific browser (if configured)
pytest selenium_tests/ --browser=chrome -v
pytest selenium_tests/ --browser=firefox -v
```

#### Screenshots and Videos
```bash
# Run tests with screenshot on failure
pytest selenium_tests/ --screenshot=on_failure -v

# Run tests with video recording
pytest selenium_tests/ --video=on_failure -v
```

### Writing Selenium Tests

#### Basic Test Structure
```python
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

@pytest.fixture(scope="function")
def driver():
    """Create WebDriver instance"""
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")  # Run headless by default
    driver = webdriver.Chrome(options=options)
    yield driver
    driver.quit()

def test_basic_navigation(driver):
    """Test basic web navigation"""
    driver.get("https://www.google.com")
    assert "Google" in driver.title

def test_form_interaction(driver):
    """Test form filling and submission"""
    driver.get("https://httpbin.org/forms/post")
    
    # Fill form fields
    name_field = driver.find_element(By.NAME, "custname")
    name_field.send_keys("Test User")
    
    # Submit form
    submit_button = driver.find_element(By.CSS_SELECTOR, "input[type='submit']")
    submit_button.click()
    
    # Verify submission
    WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.TAG_NAME, "pre"))
    )
```

#### Advanced Selenium Features
```python
# Action Chains for complex interactions
from selenium.webdriver.common.action_chains import ActionChains

def test_drag_and_drop(driver):
    """Test drag and drop functionality"""
    driver.get("https://the-internet.herokuapp.com/drag_and_drop")
    
    source = driver.find_element(By.ID, "column-a")
    target = driver.find_element(By.ID, "column-b")
    
    actions = ActionChains(driver)
    actions.drag_and_drop(source, target).perform()

# JavaScript execution
def test_javascript_execution(driver):
    """Test JavaScript execution"""
    driver.get("https://www.google.com")
    title = driver.execute_script("return document.title;")
    assert "Google" in title

# File upload
def test_file_upload(driver):
    """Test file upload functionality"""
    driver.get("https://the-internet.herokuapp.com/upload")
    
    file_input = driver.find_element(By.ID, "file-upload")
    file_input.send_keys("/path/to/test/file.txt")
    
    upload_button = driver.find_element(By.ID, "file-submit")
    upload_button.click()
```

## 🟨 JavaScript HTML Testing

### Running JavaScript Tests

#### Browser-Based Testing
1. **Open the HTML file**:
   ```bash
   # Open in browser
   open javascript_tests/index.html  # macOS
   start javascript_tests/index.html  # Windows
   xdg-open javascript_tests/index.html  # Linux
   ```

2. **Run tests interactively**:
   - Click "Run All Tests" button
   - View results in the test output area
   - Use individual test buttons for specific functionality

#### Playwright Browser Testing
```bash
# Run Playwright tests
npx playwright test

# Run with specific browser
npx playwright test --project=chromium
npx playwright test --project=firefox
npx playwright test --project=webkit

# Run in headed mode (visible browser)
npx playwright test --headed

# Run with UI mode
npx playwright test --ui

# Generate and view test report
npx playwright show-report
```

### Writing JavaScript Tests

#### Custom Test Framework
```javascript
// Using the custom test framework
test('Addition should work correctly', () => {
    assertEqual(2 + 2, 4);
    assertEqual(10 + 5, 15);
});

test('String operations should work', () => {
    const str = "Hello World";
    assertEqual(str.length, 11);
    assertEqual(str.toUpperCase(), "HELLO WORLD");
    assertTrue(str.includes("Hello"));
});

test('Array operations should work', () => {
    const arr = [1, 2, 3];
    arr.push(4);
    assertEqual(arr.length, 4);
    assertEqual(arr[3], 4);
    
    const doubled = arr.map(x => x * 2);
    assertEqual(doubled[0], 2);
});
```

#### Playwright Tests
```javascript
const { test, expect } = require('@playwright/test');

test('should load the main page', async ({ page }) => {
    await page.goto('./index.html');
    await expect(page).toHaveTitle(/JavaScript Testing Playground/);
});

test('should run math operations test', async ({ page }) => {
    await page.goto('./index.html');
    await page.click('button:has-text("Test Math Operations")');
    
    const result = page.locator('#math-result');
    await expect(result).toHaveClass(/success/);
    await expect(result).toContainText('Math Operations Test Passed');
});

test('should handle form input', async ({ page }) => {
    await page.goto('./index.html');
    
    // Test form validation
    await page.fill('#email', 'invalid-email');
    const emailInput = page.locator('#email');
    await expect(emailInput).not.toBeValid();
    
    await page.fill('#email', 'test@example.com');
    await expect(emailInput).toBeValid();
});
```

## 🔄 GitHub Actions CI/CD

### Understanding the Workflow

The GitHub Actions workflow (`.github/workflows/test.yml`) includes:

1. **Python Tests**: Multiple Python versions (3.8-3.11)
2. **Selenium Tests**: Browser automation testing
3. **JavaScript Tests**: Playwright browser testing
4. **Security Scanning**: Bandit and Safety checks
5. **Code Quality**: Linting, formatting, type checking
6. **Performance Tests**: Timing and optimization tests

### Setting Up GitHub Actions

#### 1. Repository Setup
```bash
# Initialize Git repository (if not already done)
git init
git add .
git commit -m "Initial commit: Testing playground setup"

# Add remote repository
git remote add origin https://github.com/yourusername/testing-playground.git
git push -u origin main
```

#### 2. Enable GitHub Actions
1. Go to your GitHub repository
2. Click on "Actions" tab
3. Enable workflows if prompted
4. The workflow will run automatically on push/PR

#### 3. Workflow Triggers
- **Push to main/develop**: Runs all tests
- **Pull Request**: Runs tests on PR
- **Scheduled**: Daily at 2 AM UTC
- **Manual**: Can be triggered manually from Actions tab

### Workflow Jobs Explained

#### Python Tests Job
```yaml
python-tests:
  runs-on: ubuntu-latest
  strategy:
    matrix:
      python-version: [3.8, 3.9, 3.10, 3.11]
```
- Tests on multiple Python versions
- Generates HTML reports and coverage
- Uploads artifacts for download

#### Selenium Tests Job
```yaml
selenium-tests:
  runs-on: ubuntu-latest
```
- Installs Chrome browser
- Runs Selenium tests in headless mode
- Generates test reports

#### JavaScript Tests Job
```yaml
javascript-tests:
  runs-on: ubuntu-latest
```
- Installs Playwright browsers
- Runs JavaScript tests
- Generates HTML reports

### Viewing Results

1. **GitHub Actions Tab**: View workflow runs and logs
2. **Artifacts**: Download test reports and coverage files
3. **Codecov**: View coverage reports (if integrated)
4. **Test Summary**: Automated summary of all test results

## 🏃 Running Tests

### Local Testing Commands

#### All Tests
```bash
# Run all Python and Selenium tests
pytest python_tests/ selenium_tests/ -v

# Run all JavaScript tests
npx playwright test

# Run everything with npm scripts
npm run all-tests
```

#### Individual Test Suites
```bash
# Python tests only
npm run python-test

# Selenium tests only
npm run selenium-test

# JavaScript tests only
npm run test
```

#### Test Categories
```bash
# Fast tests only (exclude slow tests)
pytest -m "not slow" -v

# Unit tests only
pytest -m "unit" -v

# Integration tests only
pytest -m "integration" -v
```

### Continuous Integration

#### Pre-commit Testing
```bash
# Install pre-commit hooks (optional)
pip install pre-commit
pre-commit install

# Run pre-commit checks
pre-commit run --all-files
```

#### Local CI Simulation
```bash
# Run all checks locally
npm run lint
npm run format-check
npm run type-check
npm run security-scan
npm run all-tests
```

## 📚 Best Practices

### Test Organization

#### File Naming Conventions
- Python tests: `test_*.py` or `*_test.py`
- Selenium tests: `test_selenium_*.py`
- JavaScript tests: `*.spec.js` or `*.test.js`

#### Test Structure
```python
# Good test structure
class TestUserManagement:
    def setup_method(self):
        """Setup before each test"""
        self.user = create_test_user()
    
    def teardown_method(self):
        """Cleanup after each test"""
        delete_test_user(self.user.id)
    
    def test_user_creation(self):
        """Test user creation functionality"""
        # Arrange
        user_data = {"name": "John", "email": "john@example.com"}
        
        # Act
        result = create_user(user_data)
        
        # Assert
        assert result.id is not None
        assert result.name == "John"
```

### Assertion Best Practices

#### Python Assertions
```python
# Good assertions
assert user.is_active == True
assert len(users) == 3
assert "error" in response.text.lower()

# Better assertions with messages
assert user.is_active, f"User {user.id} should be active"
assert len(users) == 3, f"Expected 3 users, got {len(users)}"
```

#### JavaScript Assertions
```javascript
// Good assertions
assertEqual(actual, expected);
assertTrue(condition);
assertNotNull(value);
assertContains(array, item);

// With custom messages
assertEqual(actual, expected, "Values should be equal");
```

### Test Data Management

#### Fixtures and Setup
```python
@pytest.fixture
def sample_user():
    """Create a sample user for testing"""
    user = User(name="Test User", email="test@example.com")
    user.save()
    yield user
    user.delete()  # Cleanup

@pytest.fixture
def authenticated_client():
    """Create authenticated test client"""
    client = TestClient()
    token = login_user(client, "test@example.com", "password")
    client.headers["Authorization"] = f"Bearer {token}"
    return client
```

### Performance Testing

#### Timing Tests
```python
import time

def test_performance():
    """Test that operation completes within acceptable time"""
    start_time = time.time()
    
    # Perform operation
    result = expensive_operation()
    
    end_time = time.time()
    duration = end_time - start_time
    
    assert duration < 5.0, f"Operation took {duration}s, expected < 5s"
    assert result is not None
```

### Error Handling

#### Exception Testing
```python
def test_invalid_input_raises_error():
    """Test that invalid input raises appropriate error"""
    with pytest.raises(ValueError, match="Invalid input"):
        process_invalid_data("invalid")
```

#### JavaScript Error Testing
```javascript
test('Function should throw error for invalid input', () => {
    assertThrows(() => {
        processInvalidData("invalid");
    }, Error, "Should throw error for invalid input");
});
```

## 🔧 Troubleshooting

### Common Issues

#### Python/Selenium Issues

**ChromeDriver Issues**:
```bash
# Update ChromeDriver
pip install --upgrade webdriver-manager

# Check Chrome version
google-chrome --version  # Linux
/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version  # macOS
```

**Permission Issues**:
```bash
# Fix permissions on macOS/Linux
chmod +x venv/bin/activate
```

**Import Errors**:
```bash
# Ensure virtual environment is activated
source venv/bin/activate  # macOS/Linux
venv\Scripts\activate  # Windows

# Reinstall dependencies
pip install -r requirements.txt
```

#### JavaScript/Playwright Issues

**Browser Installation Issues**:
```bash
# Reinstall Playwright browsers
npx playwright install --force

# Install specific browser
npx playwright install chromium
```

**Node.js Version Issues**:
```bash
# Check Node.js version
node --version

# Update Node.js if needed
# Use nvm (Node Version Manager) for version management
```

#### GitHub Actions Issues

**Workflow Failures**:
1. Check the Actions tab in GitHub
2. View detailed logs for failed jobs
3. Check artifact downloads for test reports
4. Verify repository secrets if using external services

**Permission Issues**:
```yaml
# Ensure proper permissions in workflow
permissions:
  contents: read
  actions: read
```

### Debugging Tips

#### Python Debugging
```python
# Add debug prints
def test_debugging():
    print(f"Debug: Current value is {value}")
    assert value > 0

# Use pytest debugging options
pytest --pdb  # Drop into debugger on failure
pytest -s     # Show print statements
pytest -vv    # Extra verbose output
```

#### Selenium Debugging
```python
# Take screenshots on failure
def test_with_screenshot(driver):
    try:
        # Test code
        pass
    except Exception as e:
        driver.save_screenshot("failure.png")
        raise e

# Add explicit waits for debugging
WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.ID, "element"))
)
```

#### JavaScript Debugging
```javascript
// Add console logging
test('Debug test', () => {
    console.log('Debug: Starting test');
    const value = getValue();
    console.log('Debug: Got value', value);
    assertNotNull(value);
});

// Use browser dev tools
// Open browser dev tools (F12) when running tests
```

### Getting Help

#### Resources
- **Pytest Documentation**: https://docs.pytest.org/
- **Selenium Documentation**: https://selenium-python.readthedocs.io/
- **Playwright Documentation**: https://playwright.dev/
- **GitHub Actions Documentation**: https://docs.github.com/en/actions

#### Common Commands Reference
```bash
# Python testing
pytest --help                    # Show all pytest options
pytest --collect-only           # Show what tests would run
pytest --fixtures               # Show available fixtures

# Selenium testing
pytest selenium_tests/ -v -s    # Verbose with print output
pytest --browser=chrome         # Run with specific browser

# JavaScript testing
npx playwright test --list      # List all tests
npx playwright test --debug     # Debug mode
npx playwright test --headed    # Run with visible browser

# Coverage analysis
pytest --cov=python_tests --cov-report=term-missing
coverage html                    # Generate HTML coverage report
```

## 🎓 Learning Resources

### Testing Concepts
- **Test-Driven Development (TDD)**
- **Behavior-Driven Development (BDD)**
- **Continuous Integration/Continuous Deployment (CI/CD)**
- **Test Automation Best Practices**

### Tools and Frameworks
- **Pytest**: Python testing framework
- **Selenium**: Web browser automation
- **Playwright**: Modern web testing
- **GitHub Actions**: CI/CD platform

### Advanced Topics
- **Parallel Test Execution**
- **Test Data Management**
- **Performance Testing**
- **Security Testing**
- **API Testing**

---

## 📞 Support

If you encounter issues or need help:

1. **Check this instructions file** for common solutions
2. **Review the test code** for examples and patterns
3. **Check GitHub Issues** if using a public repository
4. **Consult documentation** for the specific tools you're using

Remember: Testing is an iterative process. Start with simple tests and gradually add more complex scenarios as you become comfortable with the tools and concepts.

Happy Testing! 🚀
